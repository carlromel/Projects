suffixes = ['st', 'nd', 'rd', 'th']

def create_list():
    tuples_list = []
    for number, suffix in enumerate(suffixes, start=1):
        while True:
            order = f"{number}{suffix}"
            values = input(f"Please enter {order} values (*,*,*): ")
            values_list = values.split(',')

            if len(values_list) != 3:
                print('Enter exactly 3 values separated by commas!')
            elif all(value.replace('.', '', 1).isdigit() or (value.startswith('-') and value[1:].replace('.', '', 1).isdigit()) for value in values_list):
                values_tuple = tuple(map(float, values_list))
                tuples_list.append(values_tuple)
                break
            else:
                print('Enter numeric values!')
    return tuples_list

stored_tuples = create_list()

xlis, ylis, zlis = zip(*stored_tuples)

def given(prompt):
    while True:
        try:
            value = input(f"What is the associated {prompt} value of the desired output? ")
            if value == 'desired':
                desired_value = value
                return desired_value
            else:
                value = float(value)
                return value
        except:
            print("Enter numeric values or 'desired'!")

X = given("X")
Y = given("Y")
Z = given("Z")

def check_third_list(destination, source):
    if len(source) == len(set(source)):
        destination.extend(source)

third_list = []
check_third_list(third_list, xlis)
check_third_list(third_list, ylis)
check_third_list(third_list, zlis)

sorted_third_list = sorted(third_list)

temporary_sorted_third_list = []

temporary_sorted_third_list.extend(sorted_third_list)

def check_first_list(destination, source):
    temporary_sorted_third_list[0] = source[0]
    temporary_sorted_third_list[1] = source[1]
    if temporary_sorted_third_list[0] == temporary_sorted_third_list[1]:
        destination.extend(source)
        
first_list = [] 
check_first_list(first_list, xlis)
check_first_list(first_list, ylis)
check_first_list(first_list, zlis)

def check_second_list(destination, source):
    if all(first != source_item and third != source_item for first, third, source_item in zip(first_list, third_list, source)):
        destination.extend(source)

second_list = []
check_second_list(second_list, xlis)
check_second_list(second_list, ylis)
check_second_list(second_list, zlis)

first_interpolation = third_list[0] + ((third_list[1] - third_list[0])*(Y - second_list[0]))/(second_list[1] - second_list[0])

second_interpolation = third_list[2] + ((third_list[3] - third_list[2])*(Y - second_list[2]))/(second_list[3] - second_list[2])

first_interpolations_collection = [(first_list[0], Y, first_interpolation), (first_list[2], Y, second_interpolation)]

print(first_interpolations_collection)
