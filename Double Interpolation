suffixes = ['st', 'nd', 'rd', 'th']

def create_list():
    tuples_list = []
    for number, suffix in enumerate(suffixes, start=1):
        while True:
            order = f"{number}{suffix}"
            values = input(f"Please enter {order} values (*,*,*): ")
            values_list = values.split(',')

            if len(values_list) != 3:
                print('Enter exactly 3 values separated by commas!')
            elif all(value.replace('.', '', 1).isdigit() or (value.startswith('-') and value[1:].replace('.', '', 1).isdigit()) for value in values_list):
                values_tuple = tuple(map(float, values_list))
                tuples_list.append(values_tuple)
                break
            else:
                print('Enter numeric values!')
    return tuples_list

stored_tuples = create_list()

xlis, ylis, zlis = zip(*stored_tuples)

def given(prompt):
    while True:
        try:
            value = input(f"What is the associated {prompt} value of the desired output? ")
            if value == 'desired':
                desired_value = value
                return desired_value
            else:
                value = float(value)
                return value
        except:
            print("Enter numeric values or 'desired'!")

X = given("X")
Y = given("Y")
Z = given("Z")

def check_third_list(destination, source):
    if len(source) == len(set(source)):
        destination.extend(source)

third_list = []
check_third_list(third_list, xlis)
check_third_list(third_list, ylis)
check_third_list(third_list, zlis)

first_list = []
if third_list != xlis:
    first_list.extend(xlis)
elif third_list != xlis:
    first_list.extend(xlis)
elif third_list != xlis:
    first_list.extend(xlis)

def check_second_list(destination, source):
    if all(first != source_item and third != source_item for first, third, source_item in zip(first_list, third_list, source)):
        destination.extend(source)

second_list = []
check_second_list(second_list, xlis)
check_second_list(second_list, ylis)
check_second_list(second_list, zlis)

collection = [first_list, second_list, third_list]

sorted_indices = sorted(range(len(first_list)), key=lambda i: first_list[i])
sorted_collection = tuple(sorted(lst) for lst in collection)

second_list_sorted = tuple(second_list[i] for i in sorted_indices)

third_list_sorted = tuple(third_list[i] for i in sorted_indices)

sorted_collection = (sorted_collection[0], second_list_sorted, third_list_sorted)
backup_sorted_collection = (sorted_collection[0], second_list_sorted, third_list_sorted)

new_collection = [(sublist[0], sublist[1]) for sublist in sorted_collection]

new_first_list = new_collection[0]
new_second_list = new_collection[1]
new_third_list = new_collection[2]

sorted_indices = sorted(range(len(new_second_list)), key=lambda i: new_second_list[i])
sorted_collection = tuple(sorted(lst) for lst in new_collection)

first_list_sorted = tuple(new_first_list[i] for i in sorted_indices)

third_list_sorted = tuple(new_third_list[i] for i in sorted_indices)

new_sorted_collection = (first_list_sorted, sorted_collection[1], third_list_sorted)

last_collection = [(sublist[2], sublist[3]) for sublist in backup_sorted_collection]
new_first_list = last_collection[0]
new_second_list = last_collection[1]
new_third_list = last_collection[2]

sorted_indices = sorted(range(len(new_second_list)), key=lambda i: new_second_list[i])
sorted_collection = tuple(sorted(lst) for lst in last_collection)

new_first_list_sorted = tuple(new_first_list[i] for i in sorted_indices)

new_third_list_sorted = tuple(new_third_list[i] for i in sorted_indices)

last_sorted_collection = (new_first_list_sorted, sorted_collection[1], new_third_list_sorted)

final_collection = [
    (
        new_sorted_collection[i][0],
        new_sorted_collection[i][1],
        last_sorted_collection[i][0],
        last_sorted_collection[i][1]
    )
    for i in range(len(new_sorted_collection))
]

print('final_collection:', final_collection)
